{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Toast } from 'src/app/helpers/Toast';\nimport { environment } from 'src/environments/environment';\nlet SkillsComponent = class SkillsComponent {\n  constructor(portfolioData) {\n    this.portfolioData = portfolioData;\n    this.personaID = 1;\n    this.isEditing = false;\n    this.baseUrl = environment.baseUrl;\n  }\n  toggleEdition(editingState) {\n    this.isEditing = editingState;\n  }\n  // Método que utilizamos para guardar cambios, el mismo actualiza los datos de la propiedad 'sectionData' y llama al método del servicio que se encarga de actualizar los datos en el JSON.\n  updateSeccion(newData) {\n    const url = `${this.baseUrl}/secciones/editar/${this.seccionData?.id}`;\n    this.seccionData = newData;\n    this.portfolioData.updateData(url, newData).subscribe(() => {\n      Toast.fire({\n        title: 'Sección actualizada correctamente.',\n        icon: 'success'\n      });\n    });\n  }\n  reloadSeccion() {\n    this.portfolioData.getData(`${this.baseUrl}/secciones/${this.seccionData?.id}`).subscribe(data => {\n      this.seccionData = data;\n    });\n  }\n  reloadData() {\n    setTimeout(() => {\n      this.portfolioData.getData(`${this.baseUrl}/habilidades/listar`).subscribe(data => {\n        this.habilidadesData = data.filter(el => el.persona_id == this.personaID);\n        this.habilidadesFront = this.habilidadesData?.filter(el => el.tipo == 'Frontend');\n        this.habilidadesBack = this.habilidadesData?.filter(el => el.tipo == 'Backend');\n        this.habilidadesSoft = this.habilidadesData?.filter(el => el.tipo == 'Soft');\n      });\n    }, 500);\n  }\n  ngOnInit() {\n    this.habilidadesFront = this.habilidadesData?.filter(el => el.tipo == 'Frontend');\n    this.habilidadesBack = this.habilidadesData?.filter(el => el.tipo == 'Backend');\n    this.habilidadesSoft = this.habilidadesData?.filter(el => el.tipo == 'Soft');\n  }\n};\n__decorate([Input()], SkillsComponent.prototype, \"seccionData\", void 0);\n__decorate([Input()], SkillsComponent.prototype, \"habilidadesData\", void 0);\n__decorate([Input()], SkillsComponent.prototype, \"personaID\", void 0);\nSkillsComponent = __decorate([Component({\n  selector: 'app-skills',\n  templateUrl: './skills.component.html',\n  styleUrls: ['./skills.component.css']\n})], SkillsComponent);\nexport { SkillsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AACxD,SAASC,KAAK,QAAQ,uBAAuB;AAI7C,SAASC,WAAW,QAAQ,8BAA8B;AAOnD,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAY1BC,YAAoBC,aAAmC;IAAnC,kBAAa,GAAbA,aAAa;IARxB,cAAS,GAAW,CAAC;IAK9B,cAAS,GAAY,KAAK;IAC1B,YAAO,GAAWH,WAAW,CAACI,OAAO;EAEqB;EAE1DC,aAAa,CAACC,YAAqB;IACjC,IAAI,CAACC,SAAS,GAAGD,YAAY;EAC/B;EAEA;EACAE,aAAa,CAACC,OAAgB;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACN,OAAO,qBAAqB,IAAI,CAACO,WAAW,EAAEC,EAAE,EAAE;IACtE,IAAI,CAACD,WAAW,GAAGF,OAAO;IAC1B,IAAI,CAACN,aAAa,CAACU,UAAU,CAACH,GAAG,EAAED,OAAO,CAAC,CAACK,SAAS,CAAC,MAAI;MACxDf,KAAK,CAACgB,IAAI,CAAC;QACTC,KAAK,EAAE,oCAAoC;QAC3CC,IAAI,EAAE;OACP,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAC,aAAa;IACX,IAAI,CAACf,aAAa,CACfgB,OAAO,CAAC,GAAG,IAAI,CAACf,OAAO,cAAc,IAAI,CAACO,WAAW,EAAEC,EAAE,EAAE,CAAC,CAC5DE,SAAS,CAAEM,IAAI,IAAI;MAClB,IAAI,CAACT,WAAW,GAAGS,IAAI;IACzB,CAAC,CAAC;EACN;EAEAC,UAAU;IACRC,UAAU,CAAC,MAAK;MACd,IAAI,CAACnB,aAAa,CACfgB,OAAO,CAAC,GAAG,IAAI,CAACf,OAAO,qBAAqB,CAAC,CAC7CU,SAAS,CAAEM,IAAI,IAAI;QAClB,IAAI,CAACG,eAAe,GAAGH,IAAI,CAACI,MAAM,CAAEC,EAAO,IAAKA,EAAE,CAACC,UAAU,IAAI,IAAI,CAACC,SAAS,CAAC;QAChF,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACL,eAAe,EAAEC,MAAM,CACjDC,EAAE,IAAKA,EAAE,CAACI,IAAI,IAAI,UAAU,CAC9B;QACD,IAAI,CAACC,eAAe,GAAG,IAAI,CAACP,eAAe,EAAEC,MAAM,CAChDC,EAAE,IAAKA,EAAE,CAACI,IAAI,IAAI,SAAS,CAC7B;QACD,IAAI,CAACE,eAAe,GAAG,IAAI,CAACR,eAAe,EAAEC,MAAM,CAChDC,EAAE,IAAKA,EAAE,CAACI,IAAI,IAAI,MAAM,CAC1B;MACH,CAAC,CAAC;IACN,CAAC,EAAE,GAAG,CAAC;EACT;EAGAG,QAAQ;IACN,IAAI,CAACJ,gBAAgB,GAAG,IAAI,CAACL,eAAe,EAAEC,MAAM,CACjDC,EAAE,IAAKA,EAAE,CAACI,IAAI,IAAI,UAAU,CAC9B;IACD,IAAI,CAACC,eAAe,GAAG,IAAI,CAACP,eAAe,EAAEC,MAAM,CAChDC,EAAE,IAAKA,EAAE,CAACI,IAAI,IAAI,SAAS,CAC7B;IACD,IAAI,CAACE,eAAe,GAAG,IAAI,CAACR,eAAe,EAAEC,MAAM,CAChDC,EAAE,IAAKA,EAAE,CAACI,IAAI,IAAI,MAAM,CAC1B;EACH;CACD;AAnEUI,YAARnC,KAAK,EAAE,oDAAuB;AACtBmC,YAARnC,KAAK,EAAE,wDAA+B;AAC9BmC,YAARnC,KAAK,EAAE,kDAAuB;AAJpBG,eAAe,eAL3BJ,SAAS,CAAC;EACTqC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWnC,eAAe,CAqE3B;SArEYA,eAAe","names":["Component","Input","Toast","environment","SkillsComponent","constructor","portfolioData","baseUrl","toggleEdition","editingState","isEditing","updateSeccion","newData","url","seccionData","id","updateData","subscribe","fire","title","icon","reloadSeccion","getData","data","reloadData","setTimeout","habilidadesData","filter","el","persona_id","personaID","habilidadesFront","tipo","habilidadesBack","habilidadesSoft","ngOnInit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\santiago\\Desktop\\angular\\porfolio-web-angular\\src\\app\\componentes\\skills\\skills.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { Toast } from 'src/app/helpers/Toast';\nimport { Habilidad } from 'src/app/model/Habilidad';\nimport { Seccion } from 'src/app/model/Seccion';\nimport { PortfolioDataService } from 'src/app/services/portfolio-data.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-skills',\n  templateUrl: './skills.component.html',\n  styleUrls: ['./skills.component.css'],\n})\nexport class SkillsComponent implements OnInit {\n  // Informacion de la descripcion\n  @Input() seccionData?: Seccion;\n  @Input() habilidadesData?: Habilidad[];\n  @Input() personaID: number = 1;\n\n  habilidadesFront?: Habilidad[];\n  habilidadesBack?: Habilidad[];\n  habilidadesSoft?: Habilidad[];\n  isEditing: boolean = false;\n  baseUrl: string = environment.baseUrl;\n\n  constructor(private portfolioData: PortfolioDataService) {}\n\n  toggleEdition(editingState: boolean): void {\n    this.isEditing = editingState;\n  }\n\n  // Método que utilizamos para guardar cambios, el mismo actualiza los datos de la propiedad 'sectionData' y llama al método del servicio que se encarga de actualizar los datos en el JSON.\n  updateSeccion(newData: Seccion): void {\n    const url = `${this.baseUrl}/secciones/editar/${this.seccionData?.id}`;\n    this.seccionData = newData;\n    this.portfolioData.updateData(url, newData).subscribe(()=> {\n      Toast.fire({\n        title: 'Sección actualizada correctamente.',\n        icon: 'success'\n      })\n    });\n  }\n\n  reloadSeccion() {\n    this.portfolioData\n      .getData(`${this.baseUrl}/secciones/${this.seccionData?.id}`)\n      .subscribe((data) => {\n        this.seccionData = data;\n      });\n  }\n\n  reloadData() {\n    setTimeout(() => {\n      this.portfolioData\n        .getData(`${this.baseUrl}/habilidades/listar`)\n        .subscribe((data) => {\n          this.habilidadesData = data.filter((el: any) => el.persona_id == this.personaID);\n          this.habilidadesFront = this.habilidadesData?.filter(\n            (el) => el.tipo == 'Frontend'\n          );\n          this.habilidadesBack = this.habilidadesData?.filter(\n            (el) => el.tipo == 'Backend'\n          );\n          this.habilidadesSoft = this.habilidadesData?.filter(\n            (el) => el.tipo == 'Soft'\n          );\n        });\n    }, 500);\n  }\n\n\n  ngOnInit(): void {\n    this.habilidadesFront = this.habilidadesData?.filter(\n      (el) => el.tipo == 'Frontend'\n    );\n    this.habilidadesBack = this.habilidadesData?.filter(\n      (el) => el.tipo == 'Backend'\n    );\n    this.habilidadesSoft = this.habilidadesData?.filter(\n      (el) => el.tipo == 'Soft'\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}